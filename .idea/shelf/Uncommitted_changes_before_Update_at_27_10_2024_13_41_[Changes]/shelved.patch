Index: src/game/CollisionChecker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package game;\r\n\r\nimport maze.Maze;\r\nimport player.Entity;\r\n\r\npublic class CollisionChecker {\r\n\r\n    Maze maze;\r\n    GamePanel gp;\r\n\r\n    public CollisionChecker(GamePanel gp, Maze maze) {\r\n        this.gp = gp;\r\n        this.maze = maze;\r\n    }\r\n\r\n    public void checkTile(Entity entity) {\r\n        entity.collisionOn = false;\r\n\r\n        // Calculate entity's edges using playerX and playerY\r\n        int entityLeftWorldX = entity.playerX + entity.solidArea.x;\r\n        int entityRightWorldX = entity.playerX + entity.solidArea.x + entity.solidArea.width;\r\n        int entityTopWorldY = entity.playerY + entity.solidArea.y;\r\n        int entityBottomWorldY = entity.playerY + entity.solidArea.y + entity.solidArea.height;\r\n\r\n        // Convert to tile coordinates\r\n        int entityLeftCol = entityLeftWorldX / gp.tileSize;\r\n        int entityRightCol = entityRightWorldX / gp.tileSize;\r\n        int entityTopRow = entityTopWorldY / gp.tileSize;\r\n        int entityBottomRow = entityBottomWorldY / gp.tileSize;\r\n\r\n        // Collision tile numbers\r\n        int tileNum1, tileNum2;\r\n\r\n        switch (entity.direction) {\r\n            case \"up\":\r\n                entityTopRow = (entityTopWorldY - entity.speed) / gp.tileSize;\r\n                tileNum1 = gp.tilemanager.mapTileNum[entityLeftCol][entityTopRow];\r\n                tileNum2 = gp.tilemanager.mapTileNum[entityRightCol][entityTopRow];\r\n                // Debugging output\r\n                System.out.println(\"Checking collision: Up\");\r\n                System.out.println(\"Top tiles: \" + tileNum1 + \", \" + tileNum2);\r\n                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {\r\n                    entity.collisionOn = true; // Collision detected\r\n                }\r\n                break;\r\n            case \"down\":\r\n                entityBottomRow = (entityBottomWorldY + entity.speed) / gp.tileSize;\r\n                tileNum1 = gp.tilemanager.mapTileNum[entityLeftCol][entityBottomRow];\r\n                tileNum2 = gp.tilemanager.mapTileNum[entityRightCol][entityBottomRow];\r\n                // Debugging output\r\n                System.out.println(\"Checking collision: Down\");\r\n                System.out.println(\"Bottom tiles: \" + tileNum1 + \", \" + tileNum2);\r\n                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {\r\n                    entity.collisionOn = true; // Collision detected\r\n                }\r\n                break;\r\n            case \"left\":\r\n                entityLeftCol = (entityLeftWorldX - entity.speed) / gp.tileSize;\r\n                tileNum1 = gp.tilemanager.mapTileNum[entityLeftCol][entityTopRow];\r\n                tileNum2 = gp.tilemanager.mapTileNum[entityLeftCol][entityBottomRow];\r\n                // Debugging output\r\n                System.out.println(\"Checking collision: Left\");\r\n                System.out.println(\"Left tiles: \" + tileNum1 + \", \" + tileNum2);\r\n                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {\r\n                    entity.collisionOn = true; // Collision detected\r\n                }\r\n                break;\r\n            case \"right\":\r\n                entityRightCol = (entityRightWorldX + entity.speed) / gp.tileSize;\r\n                tileNum1 = gp.tilemanager.mapTileNum[entityRightCol][entityTopRow];\r\n                tileNum2 = gp.tilemanager.mapTileNum[entityRightCol][entityBottomRow];\r\n                // Debugging output\r\n                System.out.println(\"Checking collision: Right\");\r\n                System.out.println(\"Right tiles: \" + tileNum1 + \", \" + tileNum2);\r\n                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {\r\n                    entity.collisionOn = true; // Collision detected\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/src/game/CollisionChecker.java b/src/game/CollisionChecker.java
--- a/src/game/CollisionChecker.java	(revision d509fca96a2a801118b0bd284e88daadd80b8500)
+++ b/src/game/CollisionChecker.java	(date 1729787410185)
@@ -6,10 +6,10 @@
 public class CollisionChecker {
 
     Maze maze;
-    GamePanel gp;
+    GamePanel gamepanel;
 
-    public CollisionChecker(GamePanel gp, Maze maze) {
-        this.gp = gp;
+    public CollisionChecker(GamePanel gamepanel, Maze maze) {
+        this.gamepanel = gamepanel;
         this.maze = maze;
     }
 
@@ -23,60 +23,59 @@
         int entityBottomWorldY = entity.playerY + entity.solidArea.y + entity.solidArea.height;
 
         // Convert to tile coordinates
-        int entityLeftCol = entityLeftWorldX / gp.tileSize;
-        int entityRightCol = entityRightWorldX / gp.tileSize;
-        int entityTopRow = entityTopWorldY / gp.tileSize;
-        int entityBottomRow = entityBottomWorldY / gp.tileSize;
+        int entityLeftCol = entityLeftWorldX / gamepanel.tileSize;
+        int entityRightCol = entityRightWorldX / gamepanel.tileSize;
+        int entityTopRow = entityTopWorldY / gamepanel.tileSize;
+        int entityBottomRow = entityBottomWorldY / gamepanel.tileSize;
 
         // Collision tile numbers
         int tileNum1, tileNum2;
 
         switch (entity.direction) {
             case "up":
-                entityTopRow = (entityTopWorldY - entity.speed) / gp.tileSize;
-                tileNum1 = gp.tilemanager.mapTileNum[entityLeftCol][entityTopRow];
-                tileNum2 = gp.tilemanager.mapTileNum[entityRightCol][entityTopRow];
+                entityTopRow = (entityTopWorldY - entity.speed) / gamepanel.tileSize;
+                tileNum1 = gamepanel.tilemanager.mapTileNum[entityLeftCol][entityTopRow];
+                tileNum2 = gamepanel.tilemanager.mapTileNum[entityRightCol][entityTopRow];
                 // Debugging output
                 System.out.println("Checking collision: Up");
                 System.out.println("Top tiles: " + tileNum1 + ", " + tileNum2);
-                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {
+                if (gamepanel.tilemanager.tile[tileNum1].collision || gamepanel.tilemanager.tile[tileNum2].collision) {
                     entity.collisionOn = true; // Collision detected
                 }
                 break;
             case "down":
-                entityBottomRow = (entityBottomWorldY + entity.speed) / gp.tileSize;
-                tileNum1 = gp.tilemanager.mapTileNum[entityLeftCol][entityBottomRow];
-                tileNum2 = gp.tilemanager.mapTileNum[entityRightCol][entityBottomRow];
+                entityBottomRow = (entityBottomWorldY + entity.speed) / gamepanel.tileSize;
+                tileNum1 = gamepanel.tilemanager.mapTileNum[entityLeftCol][entityBottomRow];
+                tileNum2 = gamepanel.tilemanager.mapTileNum[entityRightCol][entityBottomRow];
                 // Debugging output
                 System.out.println("Checking collision: Down");
                 System.out.println("Bottom tiles: " + tileNum1 + ", " + tileNum2);
-                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {
+                if (gamepanel.tilemanager.tile[tileNum1].collision || gamepanel.tilemanager.tile[tileNum2].collision) {
                     entity.collisionOn = true; // Collision detected
                 }
                 break;
             case "left":
-                entityLeftCol = (entityLeftWorldX - entity.speed) / gp.tileSize;
-                tileNum1 = gp.tilemanager.mapTileNum[entityLeftCol][entityTopRow];
-                tileNum2 = gp.tilemanager.mapTileNum[entityLeftCol][entityBottomRow];
+                entityLeftCol = (entityLeftWorldX - entity.speed) / gamepanel.tileSize;
+                tileNum1 = gamepanel.tilemanager.mapTileNum[entityLeftCol][entityTopRow];
+                tileNum2 = gamepanel.tilemanager.mapTileNum[entityLeftCol][entityBottomRow];
                 // Debugging output
                 System.out.println("Checking collision: Left");
                 System.out.println("Left tiles: " + tileNum1 + ", " + tileNum2);
-                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {
+                if (gamepanel.tilemanager.tile[tileNum1].collision || gamepanel.tilemanager.tile[tileNum2].collision) {
                     entity.collisionOn = true; // Collision detected
                 }
                 break;
             case "right":
-                entityRightCol = (entityRightWorldX + entity.speed) / gp.tileSize;
-                tileNum1 = gp.tilemanager.mapTileNum[entityRightCol][entityTopRow];
-                tileNum2 = gp.tilemanager.mapTileNum[entityRightCol][entityBottomRow];
+                entityRightCol = (entityRightWorldX + entity.speed) / gamepanel.tileSize;
+                tileNum1 = gamepanel.tilemanager.mapTileNum[entityRightCol][entityTopRow];
+                tileNum2 = gamepanel.tilemanager.mapTileNum[entityRightCol][entityBottomRow];
                 // Debugging output
                 System.out.println("Checking collision: Right");
                 System.out.println("Right tiles: " + tileNum1 + ", " + tileNum2);
-                if (gp.tilemanager.tile[tileNum1].collision || gp.tilemanager.tile[tileNum2].collision) {
+                if (gamepanel.tilemanager.tile[tileNum1].collision || gamepanel.tilemanager.tile[tileNum2].collision) {
                     entity.collisionOn = true; // Collision detected
                 }
                 break;
         }
     }
-
 }
